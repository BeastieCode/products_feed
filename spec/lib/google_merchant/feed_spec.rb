require 'spec_helper'
require 'fog'

describe ProductsFeed::GoogleMerchant::Feed do
  let(:buffer) { StringIO.new }
  let(:items) {[
    {
      id: '1234',
      name: 'My awesome product',
      description: 'My awesome product',
      brand: 'Sex Toys Inc.',
      gtin: 'abc123',
      mpn: 'def123',
      price: 12.50,
      link: 'http://example.com/products/123',
      image_link: 'http://favva.nculo/stocazz.png',
    }
  ]}
  let(:options) {
    {
      title: 'Google Merchant feed',
      description: 'Google Merchant feed generated by Spree',
      link: 'http://example.com'
    }
  }
  let(:google_merchant) {
    ProductsFeed::GoogleMerchant::Feed.new(items, buffer, options)
  }

  describe '#initialize' do
    it 'initializes a new GoogleMerchant::Feed' do
      expect(google_merchant).to be_a(ProductsFeed::GoogleMerchant::Feed)
    end
  end

  describe '#generate' do
    context 'with all correct data' do
      let(:subject) { buffer.rewind && buffer.read }
      let(:generator) {
        google_merchant.generate do |xml, item|
          #Â mandatory fields
          xml.field 'g:id', item[:id]
          xml.field 'title', item[:name]
          xml.field 'description', item[:description]
          xml.field 'link', item[:link]
          xml.field 'g:image_link', item[:image_link]
          xml.field 'g:condition', 'new' # 'new' 'used' 'refurbished'
          xml.field 'g:availability', 'in stock' #'in stock' 'out of stock' 'preorder'
          xml.field 'g:price', "#{item[:price]} USD"
          xml.field 'g:brand', item[:brand] # Brand of the item
          xml.field 'g:mpn', item[:mpn] # Manufacturer Part Number

          # optional fields
          xml.field 'g:gtin', item[:gtin] # Global Trade Item Numbers
          xml.field 'g:item_group_id', 'GROUP_ID'
          xml.field 'g:google_product_category', 'Software > Digital Goods & Currency'
          xml.field 'g:product_type', 'PRODUCT_TYPE'
          xml.field 'g:shipping' do |sub|
            sub.field 'g:country', 'US'
            sub.field 'g:price', '10 USD'
          end
        end
      }

      before do
        generator
        subject
      end

      it 'generates a Google Merchant feed' do
        is_expected.to_not be_empty
      end

      context 'it generates correct Google Merchant XML markup' do
        let(:item) { items.first }
        it { is_expected.to have_xml 'channel > title', options[:title] }
        it { is_expected.to have_xml 'channel > description', options[:description] }
        it { is_expected.to have_xml 'channel > link', options[:link] }
        it { is_expected.to have_xml 'item > g|id', item[:id] }
        it { is_expected.to have_xml 'item > title', item[:title] }
        it { is_expected.to have_xml 'item > description', item[:description] }
        it { is_expected.to have_xml 'item > link', item[:link] }
        it { is_expected.to have_xml 'item > g|image_link', item[:image_link] }
        it { is_expected.to have_xml 'item > g|condition', item[:condition] }
        it { is_expected.to have_xml 'item > g|availability', item[:availability] }
        it { is_expected.to have_xml 'item > g|price', "#{item[:price]} USD" }
        it { is_expected.to have_xml 'item > g|brand', item[:brand] }
        it { is_expected.to have_xml 'item > g|gtin', item[:gtin] }
        it { is_expected.to have_xml 'item > g|mpn', item[:mpn] }
        it { is_expected.to have_xml 'item > g|item_group_id', 'GROUP_ID' }
        it { is_expected.to have_xml 'item > g|product_type', 'PRODUCT_TYPE' }
        it { is_expected.to have_xml 'item > g|shipping > g|country', 'US' }
        it { is_expected.to have_xml 'item > g|shipping > g|price', '10 USD' }
      end
    end

    context 'with missing required fields' do
      it 'raises error' do
        err_message = "The following fields are missing:\ntitle, description, link, g:image_link, g:condition, g:availability, g:price, g:brand, g:mpn"
        expect {
          google_merchant.generate do |xml, item|
            xml.field 'g:id', item[:id]
          end
        }.to raise_error(ProductsFeed::MissingMandatoryParamError).with_message(err_message)
      end
    end
  end
end
