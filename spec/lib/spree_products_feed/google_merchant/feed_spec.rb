require 'spec_helper'
# require File.join(Rails.root, "lib/spree_products_feed/google_merchant/feed")

describe SpreeProductsFeed::GoogleMerchant::Feed do
  let(:buffer) { StringIO.new }
  let(:product) { create :product, taxons: [create(:taxon)] }
  let(:variants) { create_list(:variant, 2, product: product) }
  let(:feed) {
    SpreeProductsFeed::GoogleMerchant::Feed.new(
      variants,
      {
        currency: Spree::Config[:currency],
        country: Spree::Country.find(Spree::Config[:default_country_id]),
        title: 'Google Merchant feed',
        description: 'Google Merchant feed generated by Spree',
        link: Spree::Store.default.url,
        google_category: 'Software > Digital Goods & Currency',
        target: buffer
      }
    )
  }

  before do
    reset_spree_preferences do |config|
      config.default_country_id = create(:country).id
      config.currency = 'USD'
    end

  end

  describe '#initialize' do
    it 'initializes a new GoogleMerchant::Feed' do
      expect(feed).to be_a(SpreeProductsFeed::GoogleMerchant::Feed)
    end
  end

  describe '#generate' do
    it 'generates a Google Merchand feed' do
      feed.generate do |xml, item|
        xml.tag! 'g:id', "#{item.sku}-#{item.id}"
        xml.tag! 'g:title', item.name
        xml.tag! 'g:description', CGI.escapeHTML(item.product.description.try(:downcase))
        xml.tag! 'g:link', Spree::Core::Engine.routes.url_helpers.product_url(item.product, host: 'example.com')
        xml.tag! 'g:image_link', 'http://favva.nculo/stocazz.png'
        xml.tag! 'g:condition', 'new' # 'new' 'used' 'refurbished'
        xml.tag! 'g:availability', 'in stock' #'in stock' 'out of stock' 'preorder'
        xml.tag! 'g:price', Spree::Money.new(item.price, currency: @options[:currency], symbol_before_without_space: false)

        xml.tag! 'g:brand', item.name.titleize # Brand of the item
        xml.tag! 'g:gtin', item.name.titleize # Global Trade Item Numbers
        xml.tag! 'g:mpn', item.name.titleize # Manufacturer Part Number

        xml.tag! 'g:item_group_id', item.product.id
        xml.tag! 'g:google_product_category', @options[:google_category]
        xml.tag! 'g:product_type', item.product.taxons.first.name
      end

      buffer.rewind
      result = buffer.read

      expect(result).to_not be_empty
    end
  end
end
